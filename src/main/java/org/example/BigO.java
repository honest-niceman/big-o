package org.example;

/*
Дополнительные материалы:
1) Теория: Книга "Карьера программиста" – Глава "О" Большое
2) Интересный кейс: https://youtu.be/c33AZBnRHks
3) Интересные доклады: https://youtu.be/sAtWK22Ho2Q и https://youtu.be/cz93lTJW-do
4) Применяем на практике: https://leetcode.com/
 */

@SuppressWarnings("unused")
public class BigO {

    /*
    Сложность по времени в данном случае будет O(N+M) так как мы обходим два разных массива.
    Пространственная сложность O(1).
     */
    public static int sum(int[] arr1, int[] arr2) {
        int result = 0;
        for (int j : arr1) {
            result += j;
        }
        for (int j : arr2) {
            result += j;
        }
        return result;
    }

    /*
    Сложность по времени в данном случае будет O(N*M) так как мы обходим один массив внутри другого.
    Пространственная сложность O(1).
     */
    public static int matrix(int[][] matrix) {
        int result = 0;
        for (int[] rows : matrix) {
            for (int cols : rows) {
                result += cols;
            }
        }
        return result;
    }

    /*
    Сложность по времени в данном случае будет O(N).
    Пространственная сложность O(N).
     */
    public static int sum(int n) {
        if (n <= 0) {
            return 0;
        }
        return n + sum(n - 1);
    }

    /*
    Сложность по времени в данном случае будет O(N).
    Пространственная сложность O(1).
     */
    public static int pairSumSequence(int n) {
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += pairSum(i, i + 1);
        }
        return sum;
    }

    private static int pairSum(int a, int b) {
        return a + b;
    }

    /*

    Сколько узлов (вызовов) в этом дереве?
          f(4)                          //1
         /    \
     f(3)        f(3)                   //3
     /    \     /    \
    f(2)    f(2)   f(2)    f(2)         //7
    /   \   /   \    / \    / \
    f(1)f(1)f(1)f(1)f(1)f(1)f(1)f(1)    //15 = (2^4) - 1. Где 4 – это глубина.

    Дерево имеет глубину N. У каждого узла (то есть вызова функции) два потомка.
    Следовательно, на каждом уровне количество узлов вдвое больше количества узлов на предыдущем уровне.

    Следовательно, временная сложность составит (2^N) - 1.

    Постарайтесь запомнить эту закономерность. Если вы используете рекурсивную функцию,
    которая порождает несколько вызовов, время выполнения часто (хотя и не всегда) имеет вид
    О(веmвu^rлубина), где ветви - количество ветвлений при каждом рекурсивном вызове. В нашем примере получается 0(2N).

    Пространственная сложность этого алгоритма составит O(N). Хотя дерево в сумме содержит 0(2N) узлов,
    в любой момент существуют только O(N) узлов. Следовательно, затраты памяти ограничиваются величиной O(N).
    */
    private static int f(int n) {
        if (n <= 0) {
            return 1;
        }
        return f(n - 1) + f(n - 1);
    }

    /*
    Полезный практический совет: когда вы встречаете задачу, в которой количество элементов последовательно делится
    надвое, скорее всего, время выполнения составит ставит O(log N).

    По этой же причине поиск элемента в сбалансированном дереве бинарного поиска выполняется за время O(log N).
    После каждого сравнения происходит переход налево или направо. С каждой стороны находится половина узлов,
    поэтому пространство задачи каждый раз сокращается вдвое.
    */
}
